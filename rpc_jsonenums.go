// generated by jsonenums -type=RPC; DO NOT EDIT

package main

import (
	"encoding/json"
	"fmt"
)

var (
	_RPCNameToValue = map[string]RPC{
		"ListApplicationsRequest":  ListApplicationsRequest,
		"ListApplicationsResponse": ListApplicationsResponse,
		"ListModulesRequest":       ListModulesRequest,
		"ListModulesResponse":      ListModulesResponse,
	}

	_RPCValueToName = map[RPC]string{
		ListApplicationsRequest:  "ListApplicationsRequest",
		ListApplicationsResponse: "ListApplicationsResponse",
		ListModulesRequest:       "ListModulesRequest",
		ListModulesResponse:      "ListModulesResponse",
	}
)

func init() {
	var v RPC
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_RPCNameToValue = map[string]RPC{
			interface{}(ListApplicationsRequest).(fmt.Stringer).String():  ListApplicationsRequest,
			interface{}(ListApplicationsResponse).(fmt.Stringer).String(): ListApplicationsResponse,
			interface{}(ListModulesRequest).(fmt.Stringer).String():       ListModulesRequest,
			interface{}(ListModulesResponse).(fmt.Stringer).String():      ListModulesResponse,
		}
	}
}

// MarshalJSON is generated so RPC satisfies json.Marshaler.
func (r RPC) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _RPCValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid RPC: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so RPC satisfies json.Unmarshaler.
func (r *RPC) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("RPC should be a string, got %s", data)
	}
	v, ok := _RPCNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid RPC %q", s)
	}
	*r = v
	return nil
}
