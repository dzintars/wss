// generated by jsonenums -type=Service; DO NOT EDIT

package main

import (
	"encoding/json"
	"fmt"
)

var (
	_ServiceNameToValue = map[string]Service{
		"ApplicationsService": ApplicationsService,
		"ModulesService":      ModulesService,
	}

	_ServiceValueToName = map[Service]string{
		ApplicationsService: "ApplicationsService",
		ModulesService:      "ModulesService",
	}
)

func init() {
	var v Service
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ServiceNameToValue = map[string]Service{
			interface{}(ApplicationsService).(fmt.Stringer).String(): ApplicationsService,
			interface{}(ModulesService).(fmt.Stringer).String():      ModulesService,
		}
	}
}

// MarshalJSON is generated so Service satisfies json.Marshaler.
func (r Service) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ServiceValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Service: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Service satisfies json.Unmarshaler.
func (r *Service) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Service should be a string, got %s", data)
	}
	v, ok := _ServiceNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Service %q", s)
	}
	*r = v
	return nil
}
